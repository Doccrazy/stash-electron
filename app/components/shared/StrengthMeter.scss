@import "../../../node_modules/bootstrap/scss/functions";
@import "../../../node_modules/bootstrap/scss/variables";
@import "../../../node_modules/bootstrap/scss/mixins/gradients";
@import "../../../node_modules/bootstrap/scss/mixins/box-shadow";
@import "../../../node_modules/bootstrap/scss/mixins/hover";
@import "../../../node_modules/bootstrap/scss/mixins/buttons";

.panel {
  width: 100%;
  text-align: center;
  font-size: 0.75em;
  border: $input-btn-border-width solid $input-border-color;

  @if $enable-rounded {
    border-radius: $input-border-radius;
  }
}

$grad: (
  0: lighten($red, 25%),
  0.25: lighten($orange, 20%),
  0.5: lighten($yellow, 20%),
  0.75: lighten($green, 25%),
  1: lighten($cyan, 20%)
);
$colors: map-values($grad);

@function lerp($gradientMap, $t) {
  $t1: 0;
  $t2: 1;

  @each $k, $col in $gradientMap {
    @if $k <= $t { $t1: $k; }

    @if $k > $t and $t2 == 1 { $t2: $k; }
  }

  @if $t1 == $t2 {
    @return map-get($gradientMap, $t1);
  }

  $v: ($t - $t1)/($t2 - $t1);

  @return mix(map-get($gradientMap, $t1), map-get($gradientMap, $t2), percentage(1 - $v));
}

.veryWeak {
  background-color: nth($colors, 1);
}

.weak {
  background-color: nth($colors, 2);
}

.reasonable {
  background-color: nth($colors, 3);
}

.strong {
  background-color: nth($colors, 4);
}

.veryStrong {
  background-color: nth($colors, 5);
}

@for $c from 0 through 2 {
  @for $l from 0 through 4 {
    :global(.str-#{$c}-#{$l}) {
      $t: ($c/2 + $l/4)/2;
      $col: lerp($grad, $t);

      @include button-variant($col, $col);
    }
  }
}
